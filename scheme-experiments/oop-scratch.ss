; scratchpad for working with encapsulated objects in scheme
; maybe scheme supports OOP anyway, but I'm practising here

(define (call-nth blob n)
  (let ((data (car blob))
        (funcs (car (cdr blob)))
        )
    (if (eq? n 0)
      ((car funcs) data)
      ;((lambda ()
      ;   (display funcs)
      ;   (newline)
      ;   )
      ; )

      (call-nth (list data (cdr funcs)) (- n 1))
      ;(call-nth blob (- n 1))
      )
    )
  )

(let ((my-test-data (list 0 "hello"))
      (f1 (lambda (data)
            (display "from f1: changing field0 from ")
            (display (car data))
            (set-car!
              data
              (+ (car data) 1)
              )
            (display " to ")
            (display (car data))
            (newline)
            )
          )
      (f2 (lambda (data)
            (display "from f2: field0 = ")
            (display (car data))
            (display "; field1 = ")
            (display (car (cdr data)))
            )
          )
      )
  (let ((my-test-funcs (list f1 f2))
        )
    (let ((my-test-object (list my-test-data my-test-funcs)))
      (display "test funcs: ")
      (display my-test-funcs)
      (newline)
      (display "test object dump: ")
      (display my-test-object)
      (newline)
      (call-nth my-test-object 0)
      (call-nth my-test-object 1)
      (newline)
      (call-nth my-test-object 0)
      (call-nth my-test-object 0)
      (call-nth my-test-object 1)
      (newline)
      )
    )
  )

(display "now, define variable")
(newline)

(define my-test-object
  (let ((my-test-data (list 0 "hello"))
        (f1 (lambda (data)
              (display "from f1: changing field0 from ")
              (display (car data))
              (set-car!
                data
                (+ (car data) 1)
                )
              (display " to ")
              (display (car data))
              (newline)
              )
            )
        (f2 (lambda (data)
              (display "from f2: field0 = ")
              (display (car data))
              (display "; field1 = ")
              (display (car (cdr data)))
              )
            )
        )
    (let ((my-test-funcs (list f1 f2)))
      (list my-test-data my-test-funcs))
    )
  )

(display "my-test-object: ")
(display my-test-object)
(newline)

(call-nth my-test-object 0)
(call-nth my-test-object 0)
(call-nth my-test-object 0)
(call-nth my-test-object 1)
(newline)

(let ((o my-test-object)
      (k my-test-object)
      )
  (call-nth o 0)
  (call-nth o 1)
  (newline)
  (call-nth k 1)
  (newline))

